
> user-microservice@1.0.0 test
> jest

[0mPOST /api/auth/request-rest [33m404[0m 6.755 ms - 161[0m
  console.log
    Password reset requested from IP: ::ffff:127.0.0.1

      at log (routes/authRoutes.js:37:11)

[0mPOST /api/auth/request-reset [33m404[0m 12.011 ms - 28[0m
  console.log
    Password reset requested from IP: ::ffff:127.0.0.1

      at log (routes/authRoutes.js:115:11)

  console.log
    Query received:  { token: 'validtoken' }

      at log (routes/authRoutes.js:122:11)

  console.log
    Token received:  validtoken

      at log (routes/authRoutes.js:127:11)

  console.log
    Decoded JWT:  Promise { { _id: '12345' } }

      at log (routes/authRoutes.js:135:13)

  console.log
    User found:  {
      _id: '12345',
      email: 'test@example.com',
      role: 'admin',
      resetPasswordToken: 'validtoken',
      resetPasswordExpire: 1728420118280
    }

      at log (routes/authRoutes.js:141:13)

[31m  console.error
    Error in resetPassword:  TypeError: user.save is not a function
        at save (/media/martinsedd/Bridge/Projects/user-microservice-js/routes/authRoutes.js:172:16)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)

      174 |     res.status(200).json({ message: "Password successfully updated" });
      175 |   } catch (err) {
    > 176 |     console.error("Error in resetPassword: ", err);
          |             ^
      177 |     res.status(500).json({ message: "Server error", error: err });
      178 |   }
      179 | });

      at error (routes/authRoutes.js:176:13)
[39m
[0mPUT /api/auth/reset-password?token=validtoken [31m500[0m 6.448 ms - 37[0m
  console.log
    Password reset requested from IP: ::ffff:127.0.0.1

      at log (routes/authRoutes.js:115:11)

  console.log
    Query received:  { token: 'invalidtoken' }

      at log (routes/authRoutes.js:122:11)

  console.log
    Token received:  invalidtoken

      at log (routes/authRoutes.js:127:11)

[31m  console.error
    Error in resetPassword:  Error: Invalid token
        at Object.<anonymous> (/media/martinsedd/Bridge/Projects/user-microservice-js/tests/auth.test.js:94:13)
        at /media/martinsedd/Bridge/Projects/user-microservice-js/node_modules/jest-mock/build/index.js:397:39
        at Object.<anonymous> (/media/martinsedd/Bridge/Projects/user-microservice-js/node_modules/jest-mock/build/index.js:404:13)
        at Object.mockConstructor [as verify] (/media/martinsedd/Bridge/Projects/user-microservice-js/node_modules/jest-mock/build/index.js:148:19)
        at verify (/media/martinsedd/Bridge/Projects/user-microservice-js/routes/authRoutes.js:134:25)
        at Layer.handle [as handle_request] (/media/martinsedd/Bridge/Projects/user-microservice-js/node_modules/express/lib/router/layer.js:95:5)
        at next (/media/martinsedd/Bridge/Projects/user-microservice-js/node_modules/express/lib/router/route.js:149:13)
        at middleware (/media/martinsedd/Bridge/Projects/user-microservice-js/node_modules/express-validator/lib/middlewares/check.js:16:13)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)

      174 |     res.status(200).json({ message: "Password successfully updated" });
      175 |   } catch (err) {
    > 176 |     console.error("Error in resetPassword: ", err);
          |             ^
      177 |     res.status(500).json({ message: "Server error", error: err });
      178 |   }
      179 | });

      at error (routes/authRoutes.js:176:13)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at next (node_modules/express/lib/router/route.js:149:13)
      at middleware (node_modules/express-validator/lib/middlewares/check.js:16:13)
[39m
[0mPUT /api/auth/reset-password?token=invalidtoken [31m500[0m 3.377 ms - 37[0m
[31m  console.error
    MongoDB connection error:  MongooseServerSelectionError: getaddrinfo EAI_AGAIN mongo
        at _handleConnectionErrors (/media/martinsedd/Bridge/Projects/user-microservice-js/node_modules/mongoose/lib/connection.js:909:11)
        at NativeConnection.openUri (/media/martinsedd/Bridge/Projects/user-microservice-js/node_modules/mongoose/lib/connection.js:860:11)
        at connectDB (/media/martinsedd/Bridge/Projects/user-microservice-js/config/db.js:4:5) {
      reason: TopologyDescription {
        type: 'Unknown',
        servers: Map(1) { 'mongo:27017' => [ServerDescription] },
        stale: false,
        compatible: true,
        heartbeatFrequencyMS: 10000,
        localThresholdMS: 15,
        setName: null,
        maxElectionId: null,
        maxSetVersion: null,
        commonWireVersion: 0,
        logicalSessionTimeoutMinutes: null
      },
      code: undefined
    }

       8 |     });
       9 |     console.log("MongoDB connected");
    > 10 |   } catch (error) {
         |             ^
      11 |     console.error("MongoDB connection error: ", error);
      12 |     process.exit(1);
      13 |   }

      at connectDB (config/db.js:10:13)
[39m
